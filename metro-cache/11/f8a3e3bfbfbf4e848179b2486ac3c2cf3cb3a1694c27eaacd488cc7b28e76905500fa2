{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/interopRequireWildcard","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/toConsumableArray","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/createClass","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/possibleConstructorReturn","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/getPrototypeOf","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/inherits","data":{"isAsync":false}},{"name":"react","data":{"isAsync":false}},{"name":"react-native","data":{"isAsync":false}},{"name":"geolib","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n\n  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/interopRequireWildcard\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n\n  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/toConsumableArray\"));\n\n  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"@babel/runtime/helpers/classCallCheck\"));\n\n  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"@babel/runtime/helpers/createClass\"));\n\n  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5], \"@babel/runtime/helpers/possibleConstructorReturn\"));\n\n  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6], \"@babel/runtime/helpers/getPrototypeOf\"));\n\n  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7], \"@babel/runtime/helpers/inherits\"));\n\n  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8], \"react\"));\n\n  var _reactNative = _$$_REQUIRE(_dependencyMap[9], \"react-native\");\n\n  var geolib = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[10], \"geolib\"));\n\n  var _jsxFileName = \"/var/www/html/NativePractie/MyApp/App.js\";\n\n  var App = function (_React$Component) {\n    (0, _inherits2.default)(App, _React$Component);\n\n    function App() {\n      var _getPrototypeOf2;\n\n      var _this;\n\n      (0, _classCallCheck2.default)(this, App);\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n      _this.state = {\n        locations: [],\n        area: null,\n        distance: null\n      };\n\n      _this.findCoordinates = function () {\n        navigator.geolocation.getCurrentPosition(function (pos) {\n          _this.setState({\n            locations: [].concat((0, _toConsumableArray2.default)(_this.state.locations), [pos])\n          });\n        }, function (error) {\n          return _reactNative.Alert.alert(error.message);\n        }, {\n          enableHighAccuracy: true,\n          timeout: 20000,\n          maximumAge: 1000\n        });\n      };\n\n      _this.getDistace = function () {\n        if (_this.state.locations.length == 2) {\n          var cood1 = _this.state.locations[0].coords;\n          var cood2 = _this.state.locations[1].coords;\n          var points = [{\n            longitude: cood1.longitude,\n            latitude: cood1.latitude\n          }, {\n            longitude: cood2.longitude,\n            latitude: cood2.latitude\n          }];\n          var distance = geolib.getDistance(points);\n          var preciseDistance = geolib.getPreciseDistance(points);\n          console.log(distance, preciseDistance);\n        } else {\n          _reactNative.Alert.alert(\"Two coordinates points required\");\n        }\n      };\n\n      _this.getArea = function () {\n        var myArr = [];\n        _this.state.locations.length > 3 && _this.state.locations.map(function (loc) {\n          myArr.push([loc.coords.latitude, loc.coords.longitude]);\n        });\n        console.log(\"my aary\", myArr);\n\n        if (myArr.length > 3) {\n          var data = geolib.getAreaOfPolygon(myArr);\n\n          _this.setState({\n            area: data\n          });\n        }\n      };\n\n      return _this;\n    }\n\n    (0, _createClass2.default)(App, [{\n      key: \"render\",\n      value: function render() {\n        return _react.default.createElement(_reactNative.View, {\n          style: styles.container,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57\n          }\n        }, _react.default.createElement(_reactNative.TouchableOpacity, {\n          onPress: this.findCoordinates,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58\n          }\n        }, _react.default.createElement(_reactNative.Text, {\n          style: styles.welcome,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59\n          }\n        }, \"Find My Coords?\")), _react.default.createElement(_reactNative.View, {\n          style: {\n            display: \"flex\",\n            flexDirection: \"row\",\n            flexWrap: \"wrap\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62\n          }\n        }, this.state.locations.length > 0 && this.state.locations.map(function (loc, key) {\n          return _react.default.createElement(_reactNative.View, {\n            style: {\n              padding: 10\n            },\n            key: key,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 68\n            }\n          }, _react.default.createElement(_reactNative.Text, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 69\n            }\n          }, loc.coords.latitude), _react.default.createElement(_reactNative.Text, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 70\n            }\n          }, loc.coords.longitude));\n        })), _react.default.createElement(_reactNative.TouchableOpacity, {\n          onPress: this.getDistace,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75\n          }\n        }, _react.default.createElement(_reactNative.Text, {\n          style: styles.welcome,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76\n          }\n        }, \"Get Distance\"), this.state.distance && _react.default.createElement(_reactNative.Text, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77\n          }\n        }, this.state.distance)), _react.default.createElement(_reactNative.TouchableOpacity, {\n          onPress: this.getArea,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79\n          }\n        }, _react.default.createElement(_reactNative.Text, {\n          style: styles.welcome,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80\n          }\n        }, \"Get area\"), this.state.area && _react.default.createElement(_reactNative.Text, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81\n          }\n        }, this.state.area)));\n      }\n    }]);\n    return App;\n  }(_react.default.Component);\n\n  exports.default = App;\n\n  var styles = _reactNative.StyleSheet.create({\n    container: {\n      flex: 1,\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      backgroundColor: \"#F5FCFF\"\n    },\n    welcome: {\n      fontSize: 20,\n      textAlign: \"center\",\n      margin: 10\n    }\n  });\n});","lineCount":211,"map":[[23,0,1,0],[25,0,2,0],[27,0,3,0],[31,6,5,21,"App"],[31,9],[46,12,6,2,"state"],[46,17],[46,20,6,10],[47,0,7,4,"locations"],[47,8,7,4,"locations"],[47,17,7,13],[47,19,7,15],[47,21,6,10],[48,0,8,4,"area"],[48,8,8,4,"area"],[48,12,8,8],[48,14,8,10],[48,18,6,10],[49,0,9,4,"distance"],[49,8,9,4,"distance"],[49,16,9,12],[49,18,9,14],[50,0,6,10],[50,7],[52,12,12,2,"findCoordinates"],[52,27],[52,30,12,20],[52,42,12,26],[53,0,13,4,"navigator"],[53,8,13,4,"navigator"],[53,17,13,13],[53,18,13,14,"geolocation"],[53,29,13,4],[53,30,13,26,"getCurrentPosition"],[53,48,13,4],[53,49,14,6],[53,59,14,6,"pos"],[53,62,14,9],[53,64,14,13],[54,0,15,8],[54,16,15,13,"setState"],[54,24,15,8],[54,25,15,22],[55,0,15,24,"locations"],[55,12,15,24,"locations"],[55,21,15,33],[55,66,15,39],[55,72,15,44,"state"],[55,77,15,39],[55,78,15,50,"locations"],[55,87,15,33],[55,91,15,61,"pos"],[55,94,15,33],[56,0,15,22],[56,11,15,8],[57,0,16,7],[57,9,13,4],[57,11,17,6],[57,21,17,6,"error"],[57,26,17,11],[58,0,17,11],[58,17,17,15,"Alert"],[58,36,17,21,"alert"],[58,41,17,15],[58,42,17,27,"error"],[58,47,17,32],[58,48,17,33,"message"],[58,55,17,15],[58,56,17,11],[59,0,17,11],[59,9,13,4],[59,11,18,6],[60,0,19,8,"enableHighAccuracy"],[60,10,19,8,"enableHighAccuracy"],[60,28,19,26],[60,30,19,28],[60,34,18,6],[61,0,20,8,"timeout"],[61,10,20,8,"timeout"],[61,17,20,15],[61,19,20,17],[61,24,18,6],[62,0,21,8,"maximumAge"],[62,10,21,8,"maximumAge"],[62,20,21,18],[62,22,21,20],[63,0,18,6],[63,9,13,4],[64,0,24,3],[64,7],[66,12,26,2,"getDistace"],[66,22],[66,25,26,15],[66,37,26,21],[67,0,27,4],[67,12,27,8],[67,18,27,13,"state"],[67,23,27,8],[67,24,27,19,"locations"],[67,33,27,8],[67,34,27,29,"length"],[67,40,27,8],[67,44,27,39],[67,45,27,4],[67,47,27,42],[68,0,28,6],[68,14,28,10,"cood1"],[68,19,28,15],[68,22,28,18],[68,28,28,23,"state"],[68,33,28,18],[68,34,28,29,"locations"],[68,43,28,18],[68,44,28,39],[68,45,28,18],[68,47,28,42,"coords"],[68,53,28,6],[69,0,29,6],[69,14,29,10,"cood2"],[69,19,29,15],[69,22,29,18],[69,28,29,23,"state"],[69,33,29,18],[69,34,29,29,"locations"],[69,43,29,18],[69,44,29,39],[69,45,29,18],[69,47,29,42,"coords"],[69,53,29,6],[70,0,30,6],[70,14,30,10,"points"],[70,20,30,16],[70,23,30,19],[70,24,31,8],[71,0,31,10,"longitude"],[71,12,31,10,"longitude"],[71,21,31,19],[71,23,31,21,"cood1"],[71,28,31,26],[71,29,31,27,"longitude"],[71,38,31,8],[72,0,31,38,"latitude"],[72,12,31,38,"latitude"],[72,20,31,46],[72,22,31,48,"cood1"],[72,27,31,53],[72,28,31,54,"latitude"],[73,0,31,8],[73,11,30,19],[73,13,32,8],[74,0,32,10,"longitude"],[74,12,32,10,"longitude"],[74,21,32,19],[74,23,32,21,"cood2"],[74,28,32,26],[74,29,32,27,"longitude"],[74,38,32,8],[75,0,32,38,"latitude"],[75,12,32,38,"latitude"],[75,20,32,46],[75,22,32,48,"cood2"],[75,27,32,53],[75,28,32,54,"latitude"],[76,0,32,8],[76,11,30,19],[76,12,30,6],[77,0,34,6],[77,14,34,10,"distance"],[77,22,34,18],[77,25,34,21,"geolib"],[77,31,34,27],[77,32,34,28,"getDistance"],[77,43,34,21],[77,44,34,40,"points"],[77,50,34,21],[77,51,34,6],[78,0,35,6],[78,14,35,10,"preciseDistance"],[78,29,35,25],[78,32,35,28,"geolib"],[78,38,35,34],[78,39,35,35,"getPreciseDistance"],[78,57,35,28],[78,58,35,54,"points"],[78,64,35,28],[78,65,35,6],[79,0,36,6,"console"],[79,10,36,6,"console"],[79,17,36,13],[79,18,36,14,"log"],[79,21,36,6],[79,22,36,18,"distance"],[79,30,36,6],[79,32,36,28,"preciseDistance"],[79,47,36,6],[80,0,37,5],[80,9,27,4],[80,15,37,11],[81,0,38,6,"Alert"],[81,29,38,12,"alert"],[81,34,38,6],[81,35,38,18],[81,68,38,6],[82,0,39,5],[83,0,40,3],[83,7],[85,12,42,2,"getArea"],[85,19],[85,22,42,12],[85,34,42,18],[86,0,43,4],[86,12,43,8,"myArr"],[86,17,43,13],[86,20,43,16],[86,22,43,4],[87,0,44,4],[87,14,44,9,"state"],[87,19,44,4],[87,20,44,15,"locations"],[87,29,44,4],[87,30,44,25,"length"],[87,36,44,4],[87,39,44,34],[87,40,44,4],[87,44,45,6],[87,50,45,11,"state"],[87,55,45,6],[87,56,45,17,"locations"],[87,65,45,6],[87,66,45,27,"map"],[87,69,45,6],[87,70,45,31],[87,80,45,31,"loc"],[87,83,45,34],[87,85,45,38],[88,0,46,8,"myArr"],[88,10,46,8,"myArr"],[88,15,46,13],[88,16,46,14,"push"],[88,20,46,8],[88,21,46,19],[88,22,46,20,"loc"],[88,25,46,23],[88,26,46,24,"coords"],[88,32,46,20],[88,33,46,31,"latitude"],[88,41,46,19],[88,43,46,41,"loc"],[88,46,46,44],[88,47,46,45,"coords"],[88,53,46,41],[88,54,46,52,"longitude"],[88,63,46,19],[88,64,46,8],[89,0,47,7],[89,9,45,6],[89,10,44,4],[90,0,48,4,"console"],[90,8,48,4,"console"],[90,15,48,11],[90,16,48,12,"log"],[90,19,48,4],[90,20,48,16],[90,29,48,4],[90,31,48,27,"myArr"],[90,36,48,4],[92,0,49,4],[92,12,49,8,"myArr"],[92,17,49,13],[92,18,49,14,"length"],[92,24,49,8],[92,27,49,23],[92,28,49,4],[92,30,49,26],[93,0,50,6],[93,14,50,10,"data"],[93,18,50,14],[93,21,50,17,"geolib"],[93,27,50,23],[93,28,50,24,"getAreaOfPolygon"],[93,44,50,17],[93,45,50,41,"myArr"],[93,50,50,17],[93,51,50,6],[95,0,52,6],[95,16,52,11,"setState"],[95,24,52,6],[95,25,52,20],[96,0,52,22,"area"],[96,12,52,22,"area"],[96,16,52,26],[96,18,52,28,"data"],[97,0,52,20],[97,11,52,6],[98,0,53,5],[99,0,54,3],[99,7],[106,31,55,11],[107,0,56,4],[107,15,57,6],[107,44,57,7],[107,61,57,6],[108,0,57,12],[108,10,57,12],[108,15,57,17],[108,17,57,19,"styles"],[108,23,57,25],[108,24,57,26,"container"],[108,33,57,6],[109,0,57,6],[110,0,57,6],[111,0,57,6],[112,0,57,6],[113,0,57,6],[113,11,58,8],[113,40,58,9],[113,69,58,8],[114,0,58,26],[114,10,58,26],[114,17,58,33],[114,19,58,35],[114,24,58,40,"findCoordinates"],[114,39,58,8],[115,0,58,8],[116,0,58,8],[117,0,58,8],[118,0,58,8],[119,0,58,8],[119,11,59,10],[119,40,59,11],[119,57,59,10],[120,0,59,16],[120,10,59,16],[120,15,59,21],[120,17,59,23,"styles"],[120,23,59,29],[120,24,59,30,"welcome"],[120,31,59,10],[121,0,59,10],[122,0,59,10],[123,0,59,10],[124,0,59,10],[125,0,59,10],[125,29,58,8],[125,30,57,6],[125,32,62,8],[125,61,62,9],[125,78,62,8],[126,0,63,10],[126,10,63,10],[126,15,63,15],[126,17,63,17],[127,0,63,19,"display"],[127,12,63,19,"display"],[127,19,63,26],[127,21,63,28],[127,27,63,17],[128,0,63,36,"flexDirection"],[128,12,63,36,"flexDirection"],[128,25,63,49],[128,27,63,51],[128,32,63,17],[129,0,63,58,"flexWrap"],[129,12,63,58,"flexWrap"],[129,20,63,66],[129,22,63,68],[130,0,63,17],[130,11,62,8],[131,0,62,8],[132,0,62,8],[133,0,62,8],[134,0,62,8],[135,0,62,8],[135,11,65,11],[135,16,65,16,"state"],[135,21,65,11],[135,22,65,22,"locations"],[135,31,65,11],[135,32,65,32,"length"],[135,38,65,11],[135,41,65,41],[135,42,65,11],[135,46,66,12],[135,51,66,17,"state"],[135,56,66,12],[135,57,66,23,"locations"],[135,66,66,12],[135,67,66,33,"map"],[135,70,66,12],[135,71,66,37],[135,81,66,38,"loc"],[135,84,66,37],[135,86,66,43,"key"],[135,89,66,37],[135,91,66,51],[136,0,67,14],[136,17,68,16],[136,46,68,17],[136,63,68,16],[137,0,68,22],[137,12,68,22],[137,17,68,27],[137,19,68,29],[138,0,68,31,"padding"],[138,14,68,31,"padding"],[138,21,68,38],[138,23,68,40],[139,0,68,29],[139,13,68,16],[140,0,68,46],[140,12,68,46],[140,15,68,49],[140,17,68,51,"key"],[140,20,68,16],[141,0,68,16],[142,0,68,16],[143,0,68,16],[144,0,68,16],[145,0,68,16],[145,13,69,18],[145,42,69,19],[145,59,69,18],[146,0,69,18],[147,0,69,18],[148,0,69,18],[149,0,69,18],[150,0,69,18],[150,13,69,25,"loc"],[150,16,69,28],[150,17,69,29,"coords"],[150,23,69,25],[150,24,69,36,"latitude"],[150,32,69,18],[150,33,68,16],[150,35,70,18],[150,64,70,19],[150,81,70,18],[151,0,70,18],[152,0,70,18],[153,0,70,18],[154,0,70,18],[155,0,70,18],[155,13,70,25,"loc"],[155,16,70,28],[155,17,70,29,"coords"],[155,23,70,25],[155,24,70,36,"longitude"],[155,33,70,18],[155,34,68,16],[155,35,67,14],[156,0,73,13],[156,9,66,12],[156,10,62,8],[156,11,57,6],[156,13,75,8],[156,42,75,9],[156,71,75,8],[157,0,75,26],[157,10,75,26],[157,17,75,33],[157,19,75,35],[157,24,75,40,"getDistace"],[157,34,75,8],[158,0,75,8],[159,0,75,8],[160,0,75,8],[161,0,75,8],[162,0,75,8],[162,11,76,10],[162,40,76,11],[162,57,76,10],[163,0,76,16],[163,10,76,16],[163,15,76,21],[163,17,76,23,"styles"],[163,23,76,29],[163,24,76,30,"welcome"],[163,31,76,10],[164,0,76,10],[165,0,76,10],[166,0,76,10],[167,0,76,10],[168,0,76,10],[168,26,75,8],[168,28,77,11],[168,33,77,16,"state"],[168,38,77,11],[168,39,77,22,"distance"],[168,47,77,11],[168,51,77,34],[168,80,77,35],[168,97,77,34],[169,0,77,34],[170,0,77,34],[171,0,77,34],[172,0,77,34],[173,0,77,34],[173,11,77,41],[173,16,77,46,"state"],[173,21,77,41],[173,22,77,52,"distance"],[173,30,77,34],[173,31,75,8],[173,32,57,6],[173,34,79,8],[173,63,79,9],[173,92,79,8],[174,0,79,26],[174,10,79,26],[174,17,79,33],[174,19,79,35],[174,24,79,40,"getArea"],[174,31,79,8],[175,0,79,8],[176,0,79,8],[177,0,79,8],[178,0,79,8],[179,0,79,8],[179,11,80,10],[179,40,80,11],[179,57,80,10],[180,0,80,16],[180,10,80,16],[180,15,80,21],[180,17,80,23,"styles"],[180,23,80,29],[180,24,80,30,"welcome"],[180,31,80,10],[181,0,80,10],[182,0,80,10],[183,0,80,10],[184,0,80,10],[185,0,80,10],[185,22,79,8],[185,24,81,11],[185,29,81,16,"state"],[185,34,81,11],[185,35,81,22,"area"],[185,39,81,11],[185,43,81,30],[185,72,81,31],[185,89,81,30],[186,0,81,30],[187,0,81,30],[188,0,81,30],[189,0,81,30],[190,0,81,30],[190,11,81,37],[190,16,81,42,"state"],[190,21,81,37],[190,22,81,48,"area"],[190,26,81,30],[190,27,79,8],[190,28,57,6],[190,29,56,4],[191,0,85,3],[194,4,5,33,"React"],[194,19,5,39,"Component"],[194,28],[198,0,88,0],[198,6,88,4,"styles"],[198,12,88,10],[198,15,88,13,"StyleSheet"],[198,39,88,24,"create"],[198,45,88,13],[198,46,88,31],[199,0,89,2,"container"],[199,4,89,2,"container"],[199,13,89,11],[199,15,89,13],[200,0,90,4,"flex"],[200,6,90,4,"flex"],[200,10,90,8],[200,12,90,10],[200,13,89,13],[201,0,91,4,"justifyContent"],[201,6,91,4,"justifyContent"],[201,20,91,18],[201,22,91,20],[201,30,89,13],[202,0,92,4,"alignItems"],[202,6,92,4,"alignItems"],[202,16,92,14],[202,18,92,16],[202,26,89,13],[203,0,93,4,"backgroundColor"],[203,6,93,4,"backgroundColor"],[203,21,93,19],[203,23,93,21],[204,0,89,13],[204,5,88,31],[205,0,95,2,"welcome"],[205,4,95,2,"welcome"],[205,11,95,9],[205,13,95,11],[206,0,96,4,"fontSize"],[206,6,96,4,"fontSize"],[206,14,96,12],[206,16,96,14],[206,18,95,11],[207,0,97,4,"textAlign"],[207,6,97,4,"textAlign"],[207,15,97,13],[207,17,97,15],[207,25,95,11],[208,0,98,4,"margin"],[208,6,98,4,"margin"],[208,12,98,10],[208,14,98,12],[209,0,95,11],[210,0,88,31],[210,3,88,13],[210,4,88,0]],"functionMap":{"names":["<global>","App","findCoordinates","navigator.geolocation.getCurrentPosition$argument_0","navigator.geolocation.getCurrentPosition$argument_1","getDistace","getArea","state.locations.map$argument_0","render"],"mappings":"AAA;eCI;oBCO;MCE;ODE;MEC,mCF;GDO;eIE;GJc;YKE;+BCG;ODE;GLO;EOC;qCDW;aCO;GPY;CDC"}},"type":"js/module"}]}